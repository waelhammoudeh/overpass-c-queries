This is to documenet the c structures used in the the overpass-c functions.
Important structures used, not all. I use typedef, so structures can be easly
defined and declared.
Below you will find structure name listed by header file in which they were
declared.
Changes: Structures in overpass-c.h have changed. Listed here are the current
structures.

I no longer show or include "wget" usage in xrds2gps example program. I use
all libcurl calls in the program, there is a minimum version requirement for this
library which is defined in "curl_func.h" header file as: 7.80.0 version.

DL_LIST : dList.h
Double linked list.

typedef struct DL_ELEM_ {

    void             *data;
    struct DL_ELEM_  *next;
    struct DL_ELEM_  *prev;

} DL_ELEM;

typedef struct DL_LIST_ {

    int         size;
    void        (*destroy) (void **data); // data is pointer to pointer
    int         (*compare ) (const char *str1, const char *str2);
    DL_ELEM     *head;
    DL_ELEM     *tail;

} DL_LIST;

Main member is DL_ELEM with a pointer to data; the pointer can be to ANY data
type - char string pointer, LINE_INFO pointer. User is responsible to maintain
this pointer, do NOT lose it, AND do not mix pointers.

overpass-c.h file defined structures:

typedef struct GPS_ {

    double 	longitude,
                    latitude;
} GPS;

typedef struct HB_ { // hundred block number

    int	ns, ew;

} HB;

// limit name length in POINT
#define POINT_NAME_LENGTH 48

typedef struct POINT_ {

    GPS     gps;
    HB       hb;
    char    name[POINT_NAME_LENGTH];
} POINT;

typedef struct BBOX_ {

    POINT   sw, ne;
} BBOX;

/* limit number of GPS nodes we store */
#define MAX_NODES 8

typedef struct XROADS_ {

    char    *firstRD, *secondRD;
    POINT  point;
    int		nodesNum;
    GPS     *nodesGPS[MAX_NODES];

} XROADS;


